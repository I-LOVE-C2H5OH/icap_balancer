// #include <trantor/net/TcpClient.h>
// #include <trantor/utils/Logger.h>
// #include <trantor/net/EventLoopThread.h>
// #include <string>
// #include <iostream>
// #include <atomic>
// #ifdef _WIN32
// #include <ws2tcpip.h>
// #else
// #include <sys/socket.h>
// #include <netinet/tcp.h>
// #endif



// char peer0_0[] = { /* Packet 322 */
// 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 
// 0x69, 0x63, 0x61, 0x70, 0x3a, 0x2f, 0x2f, 0x31, 
// 0x30, 0x2e, 0x34, 0x2e, 0x34, 0x36, 0x2e, 0x31, 
// 0x35, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6d, 0x6f, 
// 0x64, 0x20, 0x49, 0x43, 0x41, 0x50, 0x2f, 0x31, 
// 0x2e, 0x30, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 
// 0x3a, 0x20, 0x31, 0x30, 0x2e, 0x34, 0x2e, 0x34, 
// 0x36, 0x2e, 0x31, 0x35, 0x0d, 0x0a, 0x55, 0x73, 
// 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 
// 0x3a, 0x20, 0x43, 0x2d, 0x49, 0x43, 0x41, 0x50, 
// 0x2d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 
// 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 
// 0x30, 0x2e, 0x35, 0x2e, 0x31, 0x30, 0x0d, 0x0a, 
// 0x78, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 
// 0x2d, 0x69, 0x70, 0x3a, 0x31, 0x39, 0x32, 0x2e, 
// 0x31, 0x36, 0x38, 0x2e, 0x31, 0x33, 0x2e, 0x37, 
// 0x38, 0x0d, 0x0a, 0x45, 0x6e, 0x63, 0x61, 0x70, 
// 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3a, 
// 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2d, 0x62, 0x6f, 
// 0x64, 0x79, 0x3d, 0x30, 0x0d, 0x0a, 0x0d, 0x0a };

// char peer0_1[] = { /* Packet 333 */
// 0x52, 0x45, 0x53, 0x50, 0x4d, 0x4f, 0x44, 0x20, 
// 0x69, 0x63, 0x61, 0x70, 0x3a, 0x2f, 0x2f, 0x31, 
// 0x30, 0x2e, 0x34, 0x2e, 0x34, 0x36, 0x2e, 0x31, 
// 0x35, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6d, 0x6f, 
// 0x64, 0x20, 0x49, 0x43, 0x41, 0x50, 0x2f, 0x31, 
// 0x2e, 0x30, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 
// 0x3a, 0x20, 0x31, 0x30, 0x2e, 0x34, 0x2e, 0x34, 
// 0x36, 0x2e, 0x31, 0x35, 0x0d, 0x0a, 0x55, 0x73, 
// 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 
// 0x3a, 0x20, 0x43, 0x2d, 0x49, 0x43, 0x41, 0x50, 
// 0x2d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 
// 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 
// 0x30, 0x2e, 0x35, 0x2e, 0x31, 0x30, 0x0d, 0x0a, 
// 0x78, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 
// 0x2d, 0x69, 0x70, 0x3a, 0x31, 0x39, 0x32, 0x2e, 
// 0x31, 0x36, 0x38, 0x2e, 0x31, 0x33, 0x2e, 0x37, 
// 0x38, 0x0d, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x69, 
// 0x65, 0x77, 0x3a, 0x20, 0x31, 0x34, 0x34, 0x30, 
// 0x0d, 0x0a, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 
// 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x20, 
// 0x72, 0x65, 0x71, 0x2d, 0x68, 0x64, 0x72, 0x3d, 
// 0x30, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x2d, 0x68, 
// 0x64, 0x72, 0x3d, 0x39, 0x37, 0x2c, 0x20, 0x72, 
// 0x65, 0x73, 0x2d, 0x62, 0x6f, 0x64, 0x79, 0x3d, 
// 0x32, 0x31, 0x31, 0x0d, 0x0a, 0x0d, 0x0a };
// char peer0_2[] = { /* Packet 334 */
// 0x47, 0x45, 0x54, 0x20, 0x6c, 0x62, 0x43, 0x4b, 
// 0x74, 0x34, 0x41, 0x54, 0x62, 0x69, 0x6b, 0x61, 
// 0x2e, 0x62, 0x69, 0x6e, 0x20, 0x48, 0x54, 0x54, 
// 0x50, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x44, 
// 0x61, 0x74, 0x65, 0x3a, 0x20, 0x53, 0x61, 0x74, 
// 0x20, 0x41, 0x75, 0x67, 0x20, 0x33, 0x31, 0x20, 
// 0x31, 0x36, 0x3a, 0x35, 0x37, 0x3a, 0x31, 0x38, 
// 0x20, 0x32, 0x30, 0x32, 0x34, 0x0d, 0x0a, 0x55, 
// 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 
// 0x74, 0x3a, 0x20, 0x43, 0x2d, 0x49, 0x43, 0x41, 
// 0x50, 0x2d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 
// 0x2f, 0x78, 0x2e, 0x78, 0x78, 0x0d, 0x0a, 0x0d, 
// 0x0a, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 
// 0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 
// 0x0d, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 
// 0x53, 0x61, 0x74, 0x20, 0x41, 0x75, 0x67, 0x20, 
// 0x33, 0x31, 0x20, 0x31, 0x36, 0x3a, 0x35, 0x37, 
// 0x3a, 0x31, 0x38, 0x20, 0x32, 0x30, 0x32, 0x34, 
// 0x0d, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x4d, 
// 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 
// 0x20, 0x53, 0x61, 0x74, 0x20, 0x41, 0x75, 0x67, 
// 0x20, 0x33, 0x31, 0x20, 0x31, 0x36, 0x3a, 0x35, 
// 0x37, 0x3a, 0x31, 0x38, 0x20, 0x32, 0x30, 0x32, 
// 0x34, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 
// 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 
// 0x68, 0x3a, 0x20, 0x31, 0x34, 0x34, 0x30, 0x0d, 
// 0x0a, 0x0d, 0x0a, 0x35, 0x61, 0x30, 0x0d, 0x0a, 
// 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 
// 0x20, 0x3c, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x6f, 
// 0x72, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x54, 0x63, 
// 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 
// 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 
// 0x75, 0x64, 0x65, 0x20, 0x3c, 0x74, 0x72, 0x61, 
// 0x6e, 0x74, 0x6f, 0x72, 0x2f, 0x75, 0x74, 0x69, 
// 0x6c, 0x73, 0x2f, 0x4c, 0x6f, 0x67, 0x67, 0x65, 
// 0x72, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 
// 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x74, 
// 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x2f, 0x6e, 
// 0x65, 0x74, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 
// 0x4c, 0x6f, 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 
// 0x61, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 
// 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 
// 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3e, 0x0a, 
// 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 
// 0x20, 0x3c, 0x69, 0x6f, 0x73, 0x74, 0x72, 0x65, 
// 0x61, 0x6d, 0x3e, 0x0a, 0x0a, 0x23, 0x69, 0x6e, 
// 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x54, 
// 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 
// 0x2f, 0x54, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 
// 0x6e, 0x74, 0x2e, 0x68, 0x22, 0x0a, 0x0a, 0x75, 
// 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 
// 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x74, 
// 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x3b, 0x0a, 
// 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 
// 0x55, 0x53, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 
// 0x20, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x64, 0x3a, 
// 0x3a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3c, 0x74, 
// 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x3a, 0x3a, 
// 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 
// 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x74, 0x72, 
// 0x3e, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3b, 
// 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x70, 
// 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x43, 
// 0x41, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 
// 0x74, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 
// 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 
// 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x74, 0x72, 
// 0x26, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 
// 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x74, 0x72, 0x2c, 
// 0x20, 0x4d, 0x73, 0x67, 0x42, 0x75, 0x66, 0x66, 
// 0x65, 0x72, 0x2a, 0x20, 0x62, 0x75, 0x66, 0x66, 
// 0x65, 0x72, 0x29, 0x20, 0x7b, 0x0a, 0x7d, 0x0a, 
// 0x0a, 0x69, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 
// 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 
// 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x28, 
// 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 
// 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x3b, 
// 0x0a, 0x20, 0x20, 0x20, 0x20, 0x4c, 0x4f, 0x47, 
// 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x20, 0x3c, 
// 0x3c, 0x20, 0x22, 0x49, 0x43, 0x41, 0x50, 0x20, 
// 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 
// 0x74, 0x61, 0x72, 0x74, 0x22, 0x3b, 0x0a, 0x20, 
// 0x20, 0x20, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 
// 0x4c, 0x6f, 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 
// 0x61, 0x64, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x54, 
// 0x68, 0x72, 0x65, 0x61, 0x64, 0x3b, 0x0a, 0x20, 
// 0x20, 0x20, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x54, 
// 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x72, 0x75, 
// 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 
// 0x20, 0x49, 0x6e, 0x65, 0x74, 0x41, 0x64, 0x64, 
// 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x64, 0x64, 
// 0x72, 0x28, 0x31, 0x33, 0x34, 0x34, 0x29, 0x3b, 
// 0x0a, 0x20, 0x20, 0x20, 0x20, 0x54, 0x63, 0x70, 
// 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 
// 0x65, 0x72, 0x76, 0x65, 0x72, 0x28, 0x6c, 0x6f, 
// 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 
// 0x2e, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 
// 0x28, 0x29, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x72, 
// 0x2c, 0x20, 0x22, 0x49, 0x43, 0x41, 0x50, 0x53, 
// 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x29, 0x3b, 
// 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x65, 
// 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x74, 
// 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x69, 
// 0x73, 0x74, 0x65, 0x6e, 0x53, 0x6f, 0x63, 0x6b, 
// 0x4f, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 
// 0x61, 0x63, 0x6b, 0x28, 0x5b, 0x5d, 0x28, 0x69, 
// 0x6e, 0x74, 0x20, 0x66, 0x64, 0x29, 0x20, 0x7b, 
// 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x63, 0x6f, 
// 0x75, 0x74, 0x20, 0x3c, 0x3c, 0x20, 0x22, 0x73, 
// 0x65, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 
// 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x6f, 
// 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x43, 0x61, 0x6c, 
// 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x3a, 0x22, 0x20, 
// 0x3c, 0x3c, 0x20, 0x66, 0x64, 0x20, 0x3c, 0x3c, 
// 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x65, 0x6e, 
// 0x64, 0x6c, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 
// 0x7d, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 
// 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 
// 0x73, 0x65, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 
// 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x6f, 
// 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x43, 0x61, 0x6c, 
// 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x28, 0x5b, 0x5d, 
// 0x28, 0x69, 0x6e, 0x74, 0x20, 0x66, 0x64, 0x29, 
// 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x20, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 
// 0x63, 0x6f, 0x75, 0x74, 0x20, 0x3c, 0x3c, 0x20, 
// 0x22, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x63, 
// 0x63, 0x65, 0x70, 0x74, 0x53, 0x6f, 0x63, 0x6b, 
// 0x4f, 0x70, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 
// 0x61, 0x63, 0x6b, 0x3a, 0x22, 0x20, 0x3c, 0x3c, 
// 0x20, 0x66, 0x64, 0x20, 0x3c, 0x3c, 0x20, 0x73, 
// 0x74, 0x64, 0x3a, 0x3a, 0x65, 0x6e, 0x64, 0x6c, 
// 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x29, 
// 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 
// 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x65, 
// 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 
// 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 
// 0x62, 0x61, 0x63, 0x6b, 0x28, 0x0a, 0x20, 0x20, 
// 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5b, 0x5d, 
// 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x54, 
// 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 
// 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x74, 0x72, 0x20, 
// 0x26, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 
// 0x69, 0x6f, 0x6e, 0x50, 0x74, 0x72, 0x2c, 0x20, 
// 0x4d, 0x73, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 
// 0x72, 0x20, 0x2a, 0x62, 0x75, 0x66, 0x66, 0x65, 
// 0x72, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 
// 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x45, 0x42, 
// 0x55, 0x47, 0x20, 0x3c, 0x3c, 0x20, 0x22, 0x52, 
// 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x6d, 
// 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 
// 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 
// 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x72, 
// 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x43, 0x41, 
// 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 
// 0x28, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 
// 0x69, 0x6f, 0x6e, 0x50, 0x74, 0x72, 0x2c, 0x20, 
// 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x29, 0x3b, 
// 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x29, 
// 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 
// 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x65, 
// 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 
// 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 
// 0x61, 0x63, 0x6b, 0x28, 0x5b, 0x5d, 0x28, 0x63, 
// 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x54, 0x63, 0x70, 
// 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 
// 0x6f, 0x6e, 0x50, 0x74, 0x72, 0x20, 0x26, 0x63, 
// 0x6f, 0x6e, 0x6e, 0x50, 0x74, 0x72, 0x29, 0x20, 
// 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 
// 0x6e, 0x6e, 0x50, 0x74, 0x72, 0x2d, 0x3e, 0x63, 
// 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 
// 0x28, 0x29, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 
// 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x20, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x45, 
// 0x42, 0x55, 0x47, 0x20, 0x3c, 0x3c, 0x20, 0x22, 
// 0x4e, 0x65, 0x77, 0x20, 0x49, 0x43, 0x41, 0x50, 
// 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 
// 0x69, 0x6f, 0x6e, 0x22 };
// char peer0_3[] = { /* Packet 336 */
// 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x20, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 
// 0x20, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6e, 
// 0x6e, 0x50, 0x74, 0x72, 0x2d, 0x3e, 0x64, 0x69, 
// 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 
// 0x65, 0x64, 0x28, 0x29, 0x29, 0x20, 0x7b, 0x0a, 
// 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x20, 0x20, 0x20, 0x4c, 0x4f, 0x47, 0x5f, 
// 0x44, 0x45, 0x42, 0x55, 0x47, 0x20, 0x3c, 0x3c, 
// 0x20, 0x22, 0x49, 0x43, 0x41, 0x50, 0x20, 0x63, 
// 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 
// 0x6e, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 
// 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x3b, 
// 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
// 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 
// 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 
// 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 
// 0x65, 0x74, 0x49, 0x6f, 0x4c, 0x6f, 0x6f, 0x70, 
// 0x4e, 0x75, 0x6d, 0x28, 0x33, 0x29, 0x3b, 0x0a, 
// 0x20, 0x20, 0x20, 0x20, 0x73, 0x65, 0x72, 0x76, 
// 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 
// 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 
// 0x6c, 0x6f, 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 
// 0x61, 0x64, 0x2e, 0x77, 0x61, 0x69, 0x74, 0x28, 
// 0x29, 0x3b, 0x0a, 0x7d, 0x0d, 0x0a, 0x30, 0x3b, 
// 0x20, 0x69, 0x65, 0x6f, 0x66, 0x0d, 0x0a, 0x0d, 
// 0x0a };

// std::string req = "OPTIONS icap://10.4.46.15/respmod ICAP/1.0\r\nHost: 10.4.46.15\r\nUser-Agent: C-ICAP-Client-Library/0.5.10\r\nx-client-ip:192.168.13.78\r\nEncapsulated: null-body=0\r\n\r\n";
// std::string req2 = "RESPMOD icap://10.4.46.15/respmod ICAP/1.0\r\nHost: 10.4.46.15\r\nUser-Agent: C-ICAP-Client-Library/0.5.10\r\nx-client-ip:192.168.13.78\r\nPreview: 1440\r\nEncapsulated: req-hdr=0, res-hdr=97, res-body=211\r\n\r\n";
// std::string req3 = peer0_2;

// #include "../IcapPacket/IcapRequest.hpp" 
// #include "../IcapPacket/IcapRespmod.hpp" 
// using namespace trantor;
// #define USE_IPV6 0
// int mains()
// {
//     std::string req3 = peer0_2;
//     ICAPRequest reqIccap = ICAPRequest(req);
//     IcapRespmod respmod = IcapRespmod(req2);
//     trantor::Logger::setLogLevel(trantor::Logger::kTrace);
//     LOG_DEBUG << "TcpClient class test!";
//     EventLoop loop;
// #if USE_IPV6
//     InetAddress serverAddr("::1", 8888, true);
// #else
//     InetAddress serverAddr("10.4.46.15", 1344);
// #endif
//     std::shared_ptr<trantor::TcpClient> client[1];
//     std::atomic_int connCount;
//     connCount = 1;
//     for (int i = 0; i < 1; ++i)
//     {
//         client[i] = std::make_shared<trantor::TcpClient>(&loop,
//                                                          serverAddr,
//                                                          "tcpclienttest");
//         client[i]->setConnectionCallback(
//             [i, &loop, &connCount, &reqIccap](const TcpConnectionPtr &conn) {
//                 if (conn->connected())
//                 {
//                     LOG_DEBUG << i << " connected!";
//                     std::string tmp = std::to_string(i) + " client!!";
//                     conn->send(reqIccap.toString());
//                 }
//                 else
//                 {
//                     LOG_DEBUG << i << " disconnected";
//                     --connCount;
//                     if (connCount == 0)
//                         loop.quit();
//                 }
//             });
//         client[i]->setMessageCallback(
//             [](const TcpConnectionPtr &conn, MsgBuffer *buf) {
//                 LOG_DEBUG << std::string(buf->peek(), buf->readableBytes());
//                 buf->retrieveAll();
//             });
//         client[i]->connect();
//     }
//     loop.loop();
// }
